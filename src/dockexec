#!/bin/env bash
: "
A docker execution CLI utility for streamlining and simpifying calling of executables and arguments in containers
"

## Global Variables
### Project
PROG_NAME="dockexec"
PROG_VERS="v0.2.1"
CONFIG_FILE_DIR=~/.config/$PROG_NAME
CONFIG_FILE_NAME="config.sh"
CONFIG_FILE=$CONFIG_FILE_DIR/$CONFIG_FILE_NAME

### Application Defaults
DEFAULT_CONTAINER_NAME="container-name"
DEFAULT_SHELL="/bin/bash"
available_services=("yt-dlp" "gallery-dl")

## General Utilities
display_help()
{
    ## Display Help message/message
    echo -e "[Displaying Help]"
    display_options
    display_services
}

generate_cfg_file()
{
    : "
    Generate configuration file
    "
    ### Application Defaults
    contents="$(cat << EOF
EXEC_CONTAINER_NAME="$DEFAULT_CONTAINER_NAME" # Your default target container name
EXEC_SHELL="$DEFAULT_SHELL" # Your default shell
EXEC_available_services=("executables" "here") # An array containing the services you know exists, not used for now
EXEC_COMMAND="executable" # Set default command/executable to execute to the specified default container if you want to repeat
EXEC_COMMAND_ARGS="arguments" # Set default arguments to parse into the executable to execute to the specified default container for repetition
EXEC_FILE="your-commands-list-file-here" # Set your commands list file here; Place all commands you want to execute in the container in this file
EOF
)"
    echo -e "$contents" | tee -a >> $CONFIG_FILE && \
        echo -e "Defaults have been written to the configuration file, please edit the configuration file with the default values before proceeding."
}

display_options()
{
    : "
    Display all options
    "
    echo -e "All Options:"
    opt_msg="$(cat <<EOF
- Synopsis/Syntax
    $0 {options}

- Parameters
    - Positionals

    - Options
        - With Arguments
            - Execution
                + service {options} : Manage/Handle all services in the container
                    - Options
                        - With Arguments
                        - Flags
                            + copy        : Copy files to and from container and host system volumes
                            + exec        : Start/Begin executing the specified command/executable and arguments provided
                            + ls          : List all services; (WIP) Filter services
                            + -h | --help : Display help for 'dockexec service'
            - General
                + '-f [custom-file-name] | --import-cfg [custom-file-name]'  : Import a custom configuration file; Must be placed at the front to ensure it is sourced first
                + '--change-container <new-container-name>'                  : Change and execute command to a new container; Might need to use '--change-shell' if the new container/image does not have your shell
                + '--change-shell <new-shell-path>'                          : Change the current shell for the current instance
                + '--set-command [utility-name]'                             : Set a command/binary to execute in the specified target container
                + '--set-command-args <command-and-arguments-to-execute>'    : Set the arguments you want to parse into the command/executable to execute in the specified target container
                + '--set-commands-list [commands-list-file]'                 : Specify target commands list file to execute; Overrides the environment variable 'EXEC_FILE'; Omit this to use the default file name specified in the configuration file
                + '--set-container-path [container-volume-path]'             : Specify a target container path; As per requirements for 'docker cp', please specify the full file path
                + '--set-host-path [host-system-volume-path]'                : Specify a target host system volume path
        - Flags
            - General
                + --from-file         : Execute all commands specified in the commands file
                + --get-shell         : Get the currently set default shell
                + --get-command       : Get the current default command/executable
                + --get-command-args  : Get the current default argument to parse into command/executable
                + --get-commands-list : Get the current default commands list path
                + --get-container     : Get the currently set default container
                + -h | --help         : Display this help message
                + -v | --version      : Display current program version

- Usage
    - Execute command after setting your options
        $0 {options} service exec

    - Execute commands in a different shell
        $0 --change-shell /bin/{sh|zsh|fish} --set-command "your-executable" --set-command-args "your-arguments" {other-options} service exec

    - Set command/executable and arguments to execute
        $0 --set-command [yt-dlp|gallery-dl|your-executable-of-choice] --set-command-args [argument-to-parse] service exec

    - Execute commands from a commands list file
        $0 --from-file --set-commands-list /path/to/the/commands.list service exec

    - Execute commands from the default commands list file specified in the configuration file
        $0 --from-file service exec
EOF
)"
    echo -e "$opt_msg"
}

display_services()
{
    : "
    Display all services
    "
    echo -e "All Services:"
    for service_number in "${!available_services[@]}"; do
        # Get current service
        service_exec="${available_services[$service_number]}"

        # Print out message
        echo -e "\t$((service_number+1)) : $service_exec"
    done
}

display_version()
{
    : "
    Display system version
    "
    echo -e "Program Version: $PROG_VERS"
}

error()
{
    err_msg="$1"
    echo -e "\n\t$err_msg\n"

    # Exit code
    exit 1
}

check_arr_for_element()
{
    : "
    Check if element is found in array
    "
    element="$1"
    arr=("${@:2}")
    res="false"

    for curr in "${arr[@]}"; do
        if [[ "$curr" == "$element" ]]; then
            # found
            res="true"
        fi
    done

    # Return
    echo "$res"
}

exec_from_file()
{
    : "
    Read from file and execute commands in it
    "
    # Initialize Variables
    cmds=()
    cmd_exec="" # Command to execute
    DOCKER_ARGS="-it"
    SHELL_ARGS="-c"
    separator="&&"

    # Get command line arguments
    cmd_file="$1"

    # Read command/executables from file into array
    readarray -t cmds < $cmd_file

    # Format command string
    cmd_size="${#cmds[@]}"

    # Check if content has a empty trailing whitespace
    last_element_ID=$((cmd_size - 1))
    last_element="${cmds[$last_element_ID]}"
    if [[ "$last_element" == "" ]]; then
        # Trailing whitespace
        # Exit
        echo -e "Error: Please remove the empty newline at the bottom of the file [$cmd_file] before starting."
        exit 1
    fi

    # No issues
    for cmd_num in "${!cmds[@]}"; do
        # Get current command
        curr_cmd="${cmds[$cmd_num]}"

        # Format and join

        # Check if current queue is the last element
        if [[ ! $cmd_num -eq $((cmd_size - 1)) ]]; then
            # If is not the last element
            cmd_exec+="$curr_cmd $separator "
        else
            # Last element
            cmd_exec+="$curr_cmd"
        fi
    done

    # Execute commands into container
    docker exec $DOCKER_ARGS "$EXEC_CONTAINER_NAME" "$EXEC_SHELL" $SHELL_ARGS "$cmd_exec"
}

## Program/Application Utilities
cli_copy()
{
    : "
    Streamling copying files from container volume to host volume
    "
    CONTAINER_VOLUME_PATH="$1" # Target path to copy in the container from the host
    HOST_DST_PATH="$2" # Destination path to copy from the container to the host
    DOCKER_ARGS="$3"
    echo -e "Copying from [$CONTAINER_VOLUME_PATH] => [$HOST_DST_PATH]..."
    docker cp $DOCKER_ARGS $EXEC_CONTAINER_NAME:$CONTAINER_VOLUME_PATH $HOST_DST_PATH
}

cli_exec()
{
    : "
    Execute programs in the container
    "
    DOCKER_ARGS="-it"
    SHELL_ARGS="-c"
    CMD_STR="$1" # Command to Execute
    echo -e "Executing... [$EXEC_SHELL $SHELL_ARGS $CMD_STR] => [$EXEC_CONTAINER_NAME]"
    docker exec $DOCKER_ARGS "$EXEC_CONTAINER_NAME" "$EXEC_SHELL" $SHELL_ARGS "$CMD_STR"
}

## Main Body
init()
{
    : "
    Setup and Initialization of global variables and system settings
    "
    ## Check if directory exists
    if [[ ! -d $CONFIG_FILE_DIR ]]; then
        ## Does not Exists
        echo -e "Configuration folder [$CONFIG_FILE_DIR] does not exist, creating..."
        ## Create directory
        mkdir -p $CONFIG_FILE_DIR
    fi

    ## Check if config file exists
    if [[ ! -f $CONFIG_FILE ]]; then
        ## Does not Exists
        echo -e "Configuration file [$CONFIG_FILE] does not exist, creating and setting defaults..."
        generate_cfg_file
        exit 1
    fi

    ## Source config file
    source $CONFIG_FILE
}

main()
{
    argv=("$@")
    argc="${#argv[@]}"

    # Initialize Variables
    declare -A opts=(
        # Current session options
        # [key]="value"
    )

    # Check if argument is found
    if [[ "$argc" -gt 0 ]]; then
        ## Argument is found
        ## Proceed to loop
        while [[ "$1" != "" ]]; do
            ## While there are still arguments
            case "$1" in
                "service")
                    ## Manage/Handle all services in the container
                    ## Check if arguments are found
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        case "$2" in
                            "copy")
                                ## Copy files to and from container and host system volumes
                                cli_copy "$target_container_path" "$target_host_path"
                                ;;
                            "exec")
                                ## Check if options are enabled
                                if [[ "${opts["--from-file"]}" == true ]]; then
                                    ## Execute command from a file instead of specified
                                    exec_from_file "$EXEC_FILE"

                                    # Reset
                                    opts["--from-file"]=false
                                else
                                    ## Execute the CLI command
                                    cli_exec "$EXEC_COMMAND $EXEC_COMMAND_ARGS"
                                fi
                                ;;
                            "ls")
                                ## List services
                                display_services
                                ;;
                            "-h" | "--help")
                                ## Display help message with service
                                display_help
                                ;;
                            *)
                                # Invalid argument
                                error "Invalid service argument [$2] provided."
                                ;;
                        esac
                        shift 1
                    else
                        ## No arguments found
                        error "Error: No arguments provided to $1"
                    fi
                    shift 1
                    ;;
                "--change-container")
                    ## (WIP)
                    ## Change and set to a new container
                    ## Check if arguments are found
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        EXEC_CONTAINER_NAME="$2"
                        shift 1
                    else
                        error "Container not specified."
                    fi
                    shift 1
                    ;;
                "--get-container")
                    ## Get currently set container
                    echo -e "$EXEC_CONTAINER_NAME"
                    shift 1
                    ;;
                "--change-shell")
                    ## Change default shell
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        EXEC_SHELL="$2"
                        shift 1
                    fi
                    shift 1
                    ;;
                "--get-shell")
                    ## Get currently set shell
                    echo -e "$EXEC_SHELL"
                    shift 1
                    ;;
                "--set-command")
                    ## Set target command/executable to execute
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        cmd_str="$2"

                        ## Populate EXEC_COMMAND
                        EXEC_COMMAND="$cmd_str"
                        
                        ## Remove default argument if '--set-command-args' is empty so that there's no unnecessary options parsed
                        if [[ "$cmd_args" == "" ]]; then
                            ## Argument is set explicitly
                            EXEC_COMMAND_ARGS=""
                        fi
                        shift 1
                    else
                        error "No executable/command provided."
                    fi
                    shift 1
                    ;;
                "--get-command")
                    ## Get current default command/executable
                    echo -e "$EXEC_COMMAND"
                    shift 1
                    ;;
                "--set-command-args")
                    ## Set target command arguments to execute
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        cmd_args="$2"

                        ## Populate EXEC_COMMAND_ARGS
                        EXEC_COMMAND_ARGS="$cmd_args"
                        shift 1
                    else
                        error "No executable/command arguments provided."
                    fi
                    shift 1
                    ;;
                "--get-command-args")
                    ## Get current default arguments to parse into command/executable
                    echo -e "$EXEC_COMMAND_ARGS"
                    shift 1
                    ;;
                "-f" | "--import-cfg")
                    ## Import custom configuration file
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        cfg_file="$2"

                        ## Check if configuration file exists
                        if [[ -f $cfg_file ]]; then
                            ## File exists
                            source $cfg_file
                        else
                            error "Configuration file [$cfg_file] does not exist"
                            exit 1
                        fi
                        shift 1
                    else
                        error "No configuration file provided."
                    fi
                    shift 1
                    ;;
                "--set-commands-list")
                    ## Specify the commands list to execute; Use with '--from-file' to override and execute all commands from a file instead
                    ### Initialize Variables
                    cmds_file=""
                    ### Get commands file
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        ## Check if file exists
                        if [[ -f "$2" ]]; then
                            ## File exists
                            cmds_file="$2"

                            EXEC_FILE="$cmds_file"
                        else
                            ## File does not exist
                            error "Commands file [$2] does not exist."
                        fi
                        shift 1
                    else
                        ## File not provided
                        error "Commands file not provided."
                    fi
                    shift 1
                    ;;
                "--get-commands-list")
                    ## Get the default commands list
                    echo -e "$EXEC_FILE"
                    shift 1
                    ;;
                "--from-file")
                    ## Execute command from a file instead of specified options
                    opts["--from-file"]=true
                    shift 1
                    ;;
                "--set-container-path")
                    ## Specify a target container path
                    target_container_path=""
                    ### Get commands file
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        target_container_path="$2"
                        shift 1
                    else
                        ## File not provided
                        error "Container path not provided."
                    fi
                    shift 1
                    ;;
                "--set-host-path")
                    ## Specify a target host system volume path
                    target_host_path=""
                    ### Get commands file
                    if [[ "$2" != "" ]]; then
                        ## Arguments found
                        target_host_path="$2"
                        shift 1
                    else
                        ## File not provided
                        error "Host path not provided."
                    fi
                    shift 1
                    ;;
                "-h" | "--help")
                    ## Display help message
                    display_help
                    shift 1
                    ;;
                "-v" | "--version")
                    ## Display system version information
                    display_version
                    shift 1
                    ;;
                *)
                    ## Invalid argument
                    error "Invalid argument [$1] provided."
                    shift 1
                    ;;
            esac
        done
    else
        error "Error: No arguments provided."
    fi

    # All good
    exit 0
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    init
    main "$@"
fi
